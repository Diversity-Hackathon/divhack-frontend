{"version":3,"sources":["logo.png","Global.js","history.js","data/current-user-id/types.js","data/current-user-id/reducer.js","data/current-user-id/actions.js","data/current-user-id/selectors.js","data/current-user-id/index.js","components/LoadingIndicator.js","pages/Login.js","pages/Results.js","pages/RouteInput.js","pages/index.js","App.js","serviceWorker.js","data/current-trip/index.js","data/route-options/types.js","data/route-options/reducer.js","data/route-options/actions.js","data/route-options/index.js","reducers.js","configureStore.js","constants.js","data/current-user-id/saga.js","data/route-options/saga.js","sagas.js","index.js"],"names":["module","exports","styles","fontFamily","boxSizing","a","color","cursor","textDecoration","button","backgroundColor","borderWidth","outline","padding","cite","fontStyle","fieldset","margin","figure","fontSize","fontWeight","html","border","p","listStyle","createBrowserHistory","basename","LOGIN","handleActions","Types","state","isLoading","action","data","payload","login","createAction","loginSuccess","loginError","getCurrentUserId","currentUserId","getLoadingStatus","reducer","dotFlashing","keyframes","opacity","StyledCircle","styled","div","delay","colors","theme","animationDuration","animationName","animationTimingFunction","animationIterationCount","animationDirection","animationDelay","backfaceVisibility","background","maroon","borderRadius","display","height","perspective","width","Container","alignItems","marginRight","LoadingIndicator","props","Input","input","white","borderBottomLeftRadius","borderRight","borderTopLeftRadius","lineHeight","paddingLeft","Button","green","borderBottomRightRadius","borderTopRightRadius","textTransform","minWidth","StyledLoadingIndicator","marginTop","Header","h1","marginBottom","Login","dispatch","useDispatch","useState","email","setEmail","useSelector","Selectors","name","type","placeholder","value","onChange","e","currentTarget","onClick","Actions","results","id","mode","emissions","ResultItem","justifyContent","Results","map","key","AddressContainer","flexDirection","Label","h3","RouteInput","history","address","city","from","setFrom","to","setTo","loading","setLoading","updateFrom","updateTo","setTimeout","push","brown","lightBrown","darkBrown","AppContainer","Logo","img","App","store","Global","src","logo","alt","exact","path","component","Pages","Boolean","window","location","hostname","match","GET_ROUTE","getRouteSuccess","getRouteError","combineReducers","currentTrip","currentTripReducer","currentUserIdReducer","routeOptions","routeOptionsReducer","sagaMiddleware","createSagaMiddleware","composeEnhancers","composeWithDevTools","actionSanitizer","error","message","stack","API_URL","put","takeLatest","getRoute","destination","select","CurrentUserSelectors","userId","fetch","method","body","JSON","stringify","response","console","log","ok","Error","json","all","fork","currentUserIdSaga","routeOptionsSaga","initialState","createStore","rootReducer","applyMiddleware","ReactDOM","render","document","getElementById","run","sagas","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wJAAAA,EAAOC,QAAU,IAA0B,kC,qZCI5B,G,MAAA,kBACb,kBAAC,IAAD,CACEC,OAAQ,CACN,yBAA0B,CACxBC,WAAY,wBACZC,UAAW,cAEbC,EAAG,CACDC,MAAO,UACPC,OAAQ,UACRC,eAAgB,QAElBC,OAAQ,CACNC,gBAAiB,cACjBC,YAAa,EACbL,MAAO,UACPC,OAAQ,UACRK,QAAS,OACTC,QAAS,GAEXC,KAAM,CACJC,UAAW,UAEbC,SAAU,CACRL,YAAa,EACbM,OAAQ,EACRJ,QAAS,GAEXK,OAAQ,CACND,OAAQ,GAEV,yBAA0B,CACxBE,SAAU,UACVC,WAAY,UACZH,OAAQ,GAEVI,KAAM,CACJF,SAAU,QAEZ,0BAA2B,CACzBG,OAAQ,EACRL,OAAQ,EACRJ,QAAS,GAEXU,EAAG,CACDN,OAAQ,GAEV,aAAc,CACZO,UAAW,OACXP,OAAQ,EACRJ,QAAS,Q,uCCpDFY,cAAqB,CAACC,SAAU,W,uBCFlCC,EAAQ,Q,8NCOrB,IAiBeC,eAAa,mBACzBC,GAZkB,SAAAC,GAAK,O,yVAAA,IACrBA,EADqB,CAExBC,WAAW,OASe,cDvBC,iBCkBD,SAACD,EAAOE,GAAR,MAAoB,CAC9CC,KAAMD,EAAOE,QACbH,WAAW,MAGe,GAjBP,CACnBE,KAAM,KACNF,WAAW,I,QCNAI,EAAQC,YAAaP,GACrBQ,EAAeD,YFHC,iBEIhBE,EAAaF,YFHC,eGDdG,EAAmB,SAAAT,GAAK,OAAIA,EAAMU,cAAcP,MAChDQ,EAAmB,SAAAX,GAAK,OAAIA,EAAMU,cAAcT,WCS9CW,I,OCPTC,EAAcC,YAAU,CAC5B,KAAM,CACJC,QAAS,GAEX,WAAY,CACVA,QAAS,MAIPC,EAAeC,IAAOC,KAAI,gBAAGC,EAAH,EAAGA,MAAgBC,EAAnB,EAAUC,MAASD,OAAnB,MAAkC,CAChEE,kBAAmB,MACnBC,cAAeV,EACfW,wBAAyB,SACzBC,wBAAyB,WACzBC,mBAAoB,YACpBC,eAAgBR,EAChBS,mBAAoB,SACpBC,WAAYT,EAAOU,OACnBC,aAAc,EACdC,QAAS,eACTC,OAAQ,EACRC,YAAa,IACbC,MAAO,MAGHC,EAAYnB,IAAOC,IAAI,CAC3BmB,WAAY,SACZL,QAAS,cACTC,OAAQ,EACR,yBAA0B,CACxBK,YAAa,KAYFC,EARU,SAAC,GAAD,IAAMC,EAAN,yBACvB,kBAACJ,EAAcI,EACb,kBAACxB,EAAD,CAAcG,MAAM,OACpB,kBAACH,EAAD,CAAcG,MAAM,SACpB,kBAACH,EAAD,CAAcG,MAAM,UCnClBiB,EAAYnB,IAAOC,IAAI,CAC3Bc,QAAS,OACTC,OAAQ,GACRE,MAAO,SAGHM,EAAQxB,IAAOyB,OAAM,gBAAYtB,EAAZ,EAAGC,MAASD,OAAZ,MAA2B,CACpDS,WAAYT,EAAOuB,MACnBnD,OAAO,aAAD,OAAe4B,EAAOU,QAC5Bc,uBAAwB,GACxBC,YAAa,OACbC,oBAAqB,GACrBb,OAAQ,GACRc,WAAY,OACZ1D,SAAU,GACVP,QAAS,OACTkE,YAAa,GACbb,MAAO,iBAGHc,EAAShC,IAAOtC,QAAO,gBAAYyC,EAAZ,EAAGC,MAASD,OAAZ,MAA4B,CACvDS,WAAYT,EAAO8B,MACnBC,wBAAyB,GACzBC,qBAAsB,GACtB5E,MAAO4C,EAAOuB,MACdtD,SAAU,GACV4C,OAAQ,GACRoB,cAAe,YACfC,SAAU,OAGNC,EAAyBtC,YAAOsB,EAAPtB,CAAyB,CACtDuC,UAAW,KAGPC,EAASxC,IAAOyC,IAAG,iBAAO,CAC9BlF,MAAO,UACPH,WAAY,aACZsF,aAAc,OAmCDC,EAhCD,WACZ,IAAMC,EAAWC,cADC,EAEQC,mBAAS,IAFjB,mBAEXC,EAFW,KAEJC,EAFI,KAIZhE,EAAYiE,YAAYC,EAAUxD,kBAUxC,OACE,oCACA,kBAAC8C,EAAD,+BACE,kBAAC,EAAD,KACE,kBAAChB,EAAD,CACE2B,KAAK,QACLC,KAAK,QACLC,YAAY,qBACZC,MAAOP,EACPQ,SAjBa,SAACC,GACpBR,EAASQ,EAAEC,cAAcH,UAkBrB,kBAACtB,EAAD,CAAQ0B,QAfM,WAClBd,EAASe,EAAQvE,MAAM2D,MAcnB,UAED/D,GAAa,kBAACsD,EAAD,QCxEdsB,EAAU,CACd,CACEC,GAAI,EACJC,KAAM,iBACNC,UAAW,sBAEb,CACEF,GAAI,EACJC,KAAM,eACNC,UAAW,sBAEb,CACEF,GAAI,EACJC,KAAM,MACNC,UAAW,sBAITC,EAAahE,IAAOC,KAAI,gBAAYE,EAAZ,EAAGC,MAASD,OAAZ,MAA4B,CACxDe,MAAO,OACPE,WAAY,SACZR,WAAYT,EAAO8B,MACnBjB,OAAQ,GACR5C,SAAU,GACV0C,aAAc,GACdvD,MAAO4C,EAAOuB,MACd5D,QAAS,WACTiD,QAAS,OACTkD,eAAgB,gBAChB,sBAAuB,CACrBvB,aAAc,OAIZF,EAASxC,IAAOyC,IAAG,iBAAO,CAC9BlF,MAAO,UACPH,WAAY,aACZsF,aAAc,OAiBDwB,EAdC,kBACd,oCACE,kBAAC,EAAD,wBAEEN,EAAQO,KAAI,gBAAGN,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAb,OACV,kBAACC,EAAD,CAAYI,IAAKP,GACf,6BAAMC,GACN,6BAAMC,S,yjBC9ChB,IAAMM,EAAmBrE,IAAOC,IAAI,CAClCc,QAAS,OACTuD,cAAe,SACf5B,aAAc,GACdxB,MAAO,SAGHM,EAAQxB,IAAOyB,OAAM,gBAAYtB,EAAZ,EAAGC,MAASD,OAAZ,MAA2B,CACpDS,WAAYT,EAAOuB,MACnBnD,OAAO,aAAD,OAAe4B,EAAOU,QAC5BC,aAAc,GACdE,OAAQ,GACRc,WAAY,OACZ1D,SAAU,GACVP,QAAS,OACTkE,YAAa,GACbb,MAAO,aACP,sBAAuB,CACrBwB,aAAc,OAIZJ,EAAyBtC,YAAOsB,EAAPtB,CAAyB,CACtDuC,UAAW,KAGPP,EAAShC,IAAOtC,QAAO,gBAAYyC,EAAZ,EAAGC,MAASD,OAAZ,MAA4B,CACvDS,WAAYT,EAAO8B,MACnBnB,aAAc,GACdvD,MAAO4C,EAAOuB,MACdtD,SAAU,GACV4C,OAAQ,GACRoB,cAAe,YACftE,QAAS,eAGLyG,EAAQvE,IAAOwE,GAAG,CACtB9B,aAAc,IAGVF,GAASxC,IAAOyC,IAAG,iBAAO,CAC9BlF,MAAO,UACPH,WAAY,aACZsF,aAAc,OC3CD,IAAEC,QAAOuB,UAASO,WD8Cd,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EACV5B,mBAAS,CAC/B6B,QAAS,GACTC,KAAM,GACN7F,MAAO,KAJyB,mBAC3B8F,EAD2B,KACrBC,EADqB,OAOdhC,mBAAS,CAC3B6B,QAAS,GACTC,KAAM,GACN7F,MAAO,KAVyB,mBAO3BgG,EAP2B,KAOvBC,EAPuB,OAaJlC,oBAAS,GAbL,mBAa3BmC,EAb2B,KAalBC,EAbkB,KAe5BC,EAAa,SAAAhC,GAAI,OAAI,SAAAK,GACzB,IAAMF,EAAQE,EAAEC,cAAcH,MAC9BwB,GAAQ,SAAAD,GAAI,YACPA,EADO,eAET1B,EAAOG,SAIN8B,EAAW,SAAAjC,GAAI,OAAI,SAAAK,GACvB,IAAMF,EAAQE,EAAEC,cAAcH,MAC9B0B,GAAM,SAAAD,GAAE,YACHA,EADG,eAEL5B,EAAOG,SAWZ,OACE,oCACA,kBAAC,GAAD,yBACE,kBAACe,EAAD,KACE,kBAACE,EAAD,cACA,kBAAC,EAAD,CAAOnB,KAAK,OAAOC,YAAY,iBAAiBC,MAAOuB,EAAKF,QAASpB,SAAU4B,EAAW,aAC1F,kBAAC,EAAD,CAAO/B,KAAK,OAAOC,YAAY,OAAOC,MAAOuB,EAAKD,KAAMrB,SAAU4B,EAAW,UAC7E,kBAAC,EAAD,CAAO/B,KAAK,OAAOC,YAAY,QAAQC,MAAOuB,EAAK9F,MAAOwE,SAAU4B,EAAW,YAEjF,kBAACd,EAAD,KACE,kBAACE,EAAD,YACA,kBAAC,EAAD,CAAOnB,KAAK,OAAOC,YAAY,iBAAiBC,MAAOyB,EAAGJ,QAASpB,SAAU6B,EAAS,aACtF,kBAAC,EAAD,CAAOhC,KAAK,OAAOC,YAAY,OAAOC,MAAOyB,EAAGH,KAAMrB,SAAU6B,EAAS,UACzE,kBAAC,EAAD,CAAOhC,KAAK,OAAOC,YAAY,QAAQC,MAAOyB,EAAGhG,MAAOwE,SAAU6B,EAAS,YAE7E,kBAAC,EAAD,CAAQ1B,QAtBQ,WAClBwB,GAAW,GACXG,YAAW,WACTX,EAAQY,KAAK,cACZ,OAkBD,eAA0C,mCACxCL,GAAW,kBAAC,EAAD,S,oBE3Fb7E,GAAQ,CACZD,OAAQ,CACNuB,MAAO,UACPO,MAAO,UACPsD,MAAO,UACPC,WAAY,UACZC,UAAW,UACX5E,OAAQ,YAIN6E,GAAe1F,IAAOC,KAAI,kBAA4B,CAC1DmB,WAAY,SACZR,WAF8B,EAAGR,MAASD,OAEvBqF,WACnBzE,QAAS,OACTuD,cAAe,SACfpG,OAAQ,OACRqE,UAAW,IACXzE,QAAS,GACToD,MAAO,QASHyE,IANS3F,IAAOyC,IAAG,kBAA4B,CACnDlF,MADuB,EAAG6C,MAASD,OACrBU,OACdzD,WAAY,aACZsF,aAAc,OAGH1C,IAAO4F,IAAI,CACtB1E,MAAO,IACPqB,WAAY,GACZG,aAAc,MAwBDmD,OArBf,YAAyB,IAAVC,EAAS,EAATA,MACb,OACE,kBAAC,IAAD,CAAeA,MAAOA,GACpB,kBAAC,IAAD,CAAe1F,MAAOA,IACpB,kBAAC2F,EAAD,MACA,kBAAC,kBAAD,CAAiBrB,QAASA,GACxB,kBAACgB,GAAD,KACE,kBAACC,GAAD,CAAMK,IAAKC,KAAMC,IAAI,OAAOhF,MAAM,QAClC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOiF,OAAK,EAACC,KAAK,IAAIC,UAAWC,GAAM3D,QACvC,kBAAC,IAAD,CAAOyD,KAAK,SAASC,UAAWC,GAAM7B,aACtC,kBAAC,IAAD,CAAO2B,KAAK,WAAWC,UAAWC,GAAMpC,UACxC,kBAAC,IAAD,CAAOmC,UAAW,kBAAO,uDC/CnBE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sDCXShH,I,YAAAA,GAAf,GCNaiH,GAAY,Y,+NCMzB,IAqBe/H,gBAAa,kBAAC,GAC1BC,IAhBqB,SAAAC,GAAK,O,2VAAA,IACxBA,EADwB,CAE3BC,WAAW,OAae,YAAC,GD1BI,qBCiBF,SAACD,EAAOE,GAAR,MAAoB,CACjDC,KAAMD,EAAOE,QACbH,WAAW,MAOe,YAAC,GDzBE,mBCsBF,SAACD,EAAOE,GAAR,MAAoB,MAGrB,IArBP,CACnBC,KAAM,KACNF,WAAW,ICDA6H,IADWxH,YAAaP,IACNO,YFNE,sBEOpByH,GAAgBzH,YFNE,mBGKhBM,MCFAoH,8BAAgB,CAC7BC,YAAaC,GACbxH,cAAeyH,EACfC,aAAcC,K,+NCFT,IAAMC,GAAiBC,eAmBxBC,GAAmBC,+BAAoB,CAAEC,gBAhBvB,SAAAxI,GACtB,GAAIA,EAAOyI,MAAO,CAChB,IAAMA,EAAQzI,EAAOE,QAQrB,O,2VAAO,IAAKF,EAAZ,CAAoBE,QANI,CACtBiE,KAAMsE,EAAMvE,KACZwE,QAASD,EAAMC,QACfC,MAAOF,EAAME,SAMjB,OAAO3I,GAGuDkE,KAAM,c,2BC1BzD0E,GAAU,4C,aCMbzI,I,iBAAV,SAAUA,GAAMH,GAAhB,kEAkBI,OAhBYA,EAAOE,QAFvB,kBAkBUe,aAAM,KAlBhB,OAmBI,OAnBJ,SAmBU4H,aAAInE,EAAqB,IAnBnC,OAoBIe,EAAQY,KAAK,UApBjB,uBAsBI,OAtBJ,mCAsBUwC,aAAInE,EAAA,OAtBd,sDA0Be,gFACb,OADa,SACPoE,aAAWjJ,EAAaM,IADjB,wC,iBCvBL4I,I,iBAAV,SAAUA,GAAS/I,GAAnB,8EAOmB,OALXgJ,EAAchJ,EAAOE,QACZ,EAHjB,kBAOyB+I,aAAOC,EAAqB3I,kBAPrD,OASqB,OAFX4I,EAPV,gBAS2BC,MAAM,GAAD,OAAIR,GAAJ,iBAAoBO,GAAU,CACxDE,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAER,kBAX7B,UASUS,EATV,OAcIC,QAAQC,IAAI,WAAYF,GAEnBA,EAASG,GAhBlB,uBAiBY,IAAIC,MAAM,SAjBtB,QAuBI,OAHM5J,EAAOwJ,EAASK,OApB1B,UAuBUjB,aAAInE,GAAwBzE,IAvBtC,gCA4BI,OA5BJ,0BA0BIyJ,QAAQC,IAAI,QAAZ,MA1BJ,UA4BUd,aAAInE,GAAA,OA5Bd,uDAgCe,gFACb,OADa,SACPoE,aAAWjJ,GAAiBkJ,IADrB,wC,qBCpCA,gFACb,OADa,SACPgB,aAAI,CACRC,aAAKC,IACLD,aAAKE,MAHM,wCCEf,ILqB8BC,GKrBxBtD,ILqBwBsD,GKrBD,GLsB3BC,uBAAYC,GAAaF,GAAc7B,GAAiBgC,2BAAgBlC,OKpB1EmC,IAASC,OAAO,kBAAC,GAAD,CAAK3D,MAAOA,KAAU4D,SAASC,eAAe,SAE9DtC,GAAeuC,IAAIC,IZsHb,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1691c0a9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.c2fc88ef.png\";","import React from 'react';\r\nimport { Global } from '@emotion/core';\r\nimport 'normalize.css';\r\n\r\nexport default () => (\r\n  <Global\r\n    styles={{\r\n      '*, *::before, *::after': {\r\n        fontFamily: 'system-ui, sans-serif',\r\n        boxSizing: 'border-box',\r\n      },\r\n      a: {\r\n        color: 'inherit',\r\n        cursor: 'pointer',\r\n        textDecoration: 'none',\r\n      },\r\n      button: {\r\n        backgroundColor: 'transparent',\r\n        borderWidth: 0,\r\n        color: 'inherit',\r\n        cursor: 'pointer',\r\n        outline: 'none',\r\n        padding: 0,\r\n      },\r\n      cite: {\r\n        fontStyle: 'normal',\r\n      },\r\n      fieldset: {\r\n        borderWidth: 0,\r\n        margin: 0,\r\n        padding: 0,\r\n      },\r\n      figure: {\r\n        margin: 0,\r\n      },\r\n      'h1, h2, h3, h4, h5, h6': {\r\n        fontSize: 'inherit',\r\n        fontWeight: 'inherit',\r\n        margin: 0,\r\n      },\r\n      html: {\r\n        fontSize: '20px',\r\n      },\r\n      'input::-moz-focus-inner': {\r\n        border: 0,\r\n        margin: 0,\r\n        padding: 0,\r\n      },\r\n      p: {\r\n        margin: 0,\r\n      },\r\n      'ul, ol, dd': {\r\n        listStyle: 'none',\r\n        margin: 0,\r\n        padding: 0,\r\n      },\r\n    }}\r\n  />\r\n);\r\n","import { createBrowserHistory } from 'history';\r\n\r\nexport default createBrowserHistory({basename: \"/users\"});","export const LOGIN = 'LOGIN';\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_ERROR = 'LOGIN_ERROR';","// CURRENT USER ID \r\n\r\n// IMPORTS\r\nimport { handleActions } from 'redux-actions';\r\nimport * as Types from './types';\r\n\r\n// SETS DATA FOR INITIAL STATE\r\nconst initialState = {\r\n  data: null,\r\n  isLoading: false,\r\n};\r\n\r\n// HANDLES ACTION, STARTS LOADING\r\nconst loginReducer = state => ({\r\n  ...state,\r\n  isLoading: true,\r\n});\r\n\r\n// UPDATES STATE WITH PAYLOAD FROM ACTION, STOPS LOADING\r\nconst loginSuccessReducer = (state, action) => ({\r\n  data: action.payload,\r\n  isLoading: false,\r\n});\r\n\r\nexport default handleActions({\r\n  [Types.LOGIN]: loginReducer,\r\n  [Types.LOGIN_SUCCESS]: loginSuccessReducer,\r\n}, initialState);\r\n\r\n\r\n\r\n","import { createAction } from 'redux-actions';\r\nimport * as Types from './types';\r\n\r\nexport const login = createAction(Types.LOGIN);\r\nexport const loginSuccess = createAction(Types.LOGIN_SUCCESS);\r\nexport const loginError = createAction(Types.LOGIN_ERROR);","// CURRENT USER ID STATE SELECTORS\r\nexport const getCurrentUserId = state => state.currentUserId.data;\r\nexport const getLoadingStatus = state => state.currentUserId.isLoading;","// CURRENT USER ID \r\n\r\n// LOCAL IMPORTS\r\nimport reducer from './reducer';\r\nimport * as ActionTypes from './types';\r\nimport * as Actions from './actions';\r\nimport * as Selectors from './selectors';\r\n\r\n\r\nexport { Actions, ActionTypes, Selectors };\r\n\r\nexport default reducer;\r\n","import React from 'react';\r\nimport styled from '@emotion/styled';\r\nimport { keyframes } from '@emotion/core';\r\n\r\nconst dotFlashing = keyframes({\r\n  '0%': {\r\n    opacity: 1,\r\n  },\r\n  '50%,100%': {\r\n    opacity: 0.5,\r\n  },\r\n});\r\n\r\nconst StyledCircle = styled.div(({ delay, theme: { colors }}) => ({\r\n  animationDuration: '.5s',\r\n  animationName: dotFlashing,\r\n  animationTimingFunction: 'linear',\r\n  animationIterationCount: 'infinite',\r\n  animationDirection: 'alternate',\r\n  animationDelay: delay,\r\n  backfaceVisibility: 'hidden', // fix flickering animation\r\n  background: colors.maroon,\r\n  borderRadius: 4,\r\n  display: 'inline-block',\r\n  height: 8,\r\n  perspective: 1000, // fix flickering animation\r\n  width: 8,\r\n}));\r\n\r\nconst Container = styled.div({\r\n  alignItems: 'center',\r\n  display: 'inline-flex',\r\n  height: 8,\r\n  '& div:not(:last-child)': {\r\n    marginRight: 3,\r\n  },\r\n});\r\n\r\nconst LoadingIndicator = ({ ...props }) => (\r\n  <Container {...props}>\r\n    <StyledCircle delay=\"0s\" />\r\n    <StyledCircle delay=\".25s\" />\r\n    <StyledCircle delay=\".5s\" />\r\n  </Container>\r\n);\r\n\r\nexport default LoadingIndicator;\r\n","// REACT IMPORT\r\nimport React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Actions, Selectors } from '../data/current-user-id';\r\nimport styled from '@emotion/styled';\r\nimport LoadingIndicator from '../components/LoadingIndicator';\r\n\r\nconst Container = styled.div({\r\n  display: 'flex',\r\n  height: 32,\r\n  width: '100%',\r\n});\r\n\r\nconst Input = styled.input(({ theme: { colors }}) => ({\r\n  background: colors.white,\r\n  border: `1px solid ${colors.maroon}`,\r\n  borderBottomLeftRadius: 16,\r\n  borderRight: 'none',\r\n  borderTopLeftRadius: 16,\r\n  height: 32,\r\n  lineHeight: '20px',\r\n  fontSize: 20,\r\n  outline: 'none',\r\n  paddingLeft: 16,\r\n  width: 'calc(100%)',\r\n}));\r\n\r\nconst Button = styled.button(({ theme: { colors } }) => ({\r\n  background: colors.green,\r\n  borderBottomRightRadius: 16,\r\n  borderTopRightRadius: 16,\r\n  color: colors.white,\r\n  fontSize: 14,\r\n  height: 32,\r\n  textTransform: 'uppercase',\r\n  minWidth: 64,\r\n}));\r\n\r\nconst StyledLoadingIndicator = styled(LoadingIndicator)({\r\n  marginTop: 16,\r\n});\r\n\r\nconst Header = styled.h1(() => ({\r\n  color: \"#6F0808\",\r\n  fontFamily: 'sans-serif',\r\n  marginBottom: 32,\r\n}));\r\n\r\nconst Login = () => {\r\n  const dispatch = useDispatch();\r\n  const [email, setEmail] = useState('');\r\n\r\n  const isLoading = useSelector(Selectors.getLoadingStatus);\r\n\r\n  const handleChange = (e) => {\r\n    setEmail(e.currentTarget.value);\r\n  }\r\n\r\n  const handleClick = () => {\r\n    dispatch(Actions.login(email));\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <Header>Welcome to Green Foot!</Header>\r\n      <Container> \r\n        <Input\r\n          name=\"email\"\r\n          type=\"email\"\r\n          placeholder=\"Your email address\"\r\n          value={email}\r\n          onChange={handleChange}\r\n        />\r\n        <Button onClick={handleClick}>Login</Button>\r\n      </Container>\r\n      {isLoading && <StyledLoadingIndicator />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Login;","import React from \"react\";\r\nimport styled from '@emotion/styled';\r\n\r\nconst results = [\r\n  {\r\n    id: 1,\r\n    mode: 'Car (gasoline)',\r\n    emissions: '155.10 lbs of CO2e'\r\n  },\r\n  {\r\n    id: 2,\r\n    mode: 'Car (diesel)',\r\n    emissions: '177.68 lbs of CO2e'\r\n  },\r\n  {\r\n    id: 3,\r\n    mode: 'Bus',\r\n    emissions: '37.00 lbs of CO2e'\r\n  },\r\n];\r\n\r\nconst ResultItem = styled.div(({ theme: { colors } }) => ({\r\n  width: '100%',\r\n  alignItems: 'center',\r\n  background: colors.green,\r\n  height: 32,\r\n  fontSize: 16,\r\n  borderRadius: 16,\r\n  color: colors.white,\r\n  padding: '8px 16px',\r\n  display: 'flex',\r\n  justifyContent: 'space-between',\r\n  ':not(:last-of-type)': {\r\n    marginBottom: 8,\r\n  },\r\n}));\r\n\r\nconst Header = styled.h1(() => ({\r\n  color: \"#6F0808\",\r\n  fontFamily: 'sans-serif',\r\n  marginBottom: 32,\r\n}));\r\n\r\nconst Results = () => (\r\n  <>\r\n    <Header>Your footprint:</Header>\r\n    {\r\n      results.map(({ id, mode, emissions }) => (\r\n        <ResultItem key={id}>\r\n          <div>{mode}</div>\r\n          <div>{emissions}</div>\r\n        </ResultItem>\r\n      ))\r\n    }\r\n  </>\r\n);\r\n\r\nexport default Results;\r\n","import React, { useState } from \"react\";\r\nimport styled from '@emotion/styled';\r\nimport LoadingIndicator from '../components/LoadingIndicator';\r\n\r\nconst AddressContainer = styled.div({\r\n  display: 'flex',\r\n  flexDirection: 'column',\r\n  marginBottom: 16,\r\n  width: '100%',\r\n});\r\n\r\nconst Input = styled.input(({ theme: { colors }}) => ({\r\n  background: colors.white,\r\n  border: `1px solid ${colors.maroon}`,\r\n  borderRadius: 16,\r\n  height: 32,\r\n  lineHeight: '20px',\r\n  fontSize: 20,\r\n  outline: 'none',\r\n  paddingLeft: 16,\r\n  width: 'calc(100%)',\r\n  ':not(:last-of-type)': {\r\n    marginBottom: 4,\r\n  },\r\n}));\r\n\r\nconst StyledLoadingIndicator = styled(LoadingIndicator)({\r\n  marginTop: 16,\r\n});\r\n\r\nconst Button = styled.button(({ theme: { colors } }) => ({\r\n  background: colors.green,\r\n  borderRadius: 16,\r\n  color: colors.white,\r\n  fontSize: 14,\r\n  height: 32,\r\n  textTransform: 'uppercase',\r\n  padding: '8px 16px',\r\n}));\r\n\r\nconst Label = styled.h3({\r\n  marginBottom: 8,\r\n});\r\n\r\nconst Header = styled.h1(() => ({\r\n  color: \"#6F0808\",\r\n  fontFamily: 'sans-serif',\r\n  marginBottom: 32,\r\n}));\r\n\r\nconst RouteInput = ({ history }) => {\r\n  const [from, setFrom] = useState({\r\n    address: '',\r\n    city: '',\r\n    state: '',\r\n  });\r\n\r\n  const [to, setTo] = useState({\r\n    address: '',\r\n    city: '',\r\n    state: '',\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const updateFrom = name => e => {\r\n    const value = e.currentTarget.value;\r\n    setFrom(from => ({\r\n      ...from,\r\n      [name]: value,\r\n    }));\r\n  }\r\n\r\n  const updateTo = name => e => {\r\n    const value = e.currentTarget.value\r\n    setTo(to => ({\r\n      ...to,\r\n      [name]: value,\r\n    }));\r\n  }\r\n\r\n  const handleClick = () => {\r\n    setLoading(true);\r\n    setTimeout(() => {\r\n      history.push('/results');\r\n    }, 600)\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <Header>Enter locations:</Header>\r\n      <AddressContainer>\r\n        <Label>From:</Label>\r\n        <Input type=\"text\" placeholder=\"Street Address\" value={from.address} onChange={updateFrom('address')} />\r\n        <Input type=\"text\" placeholder=\"City\" value={from.city} onChange={updateFrom('city')} />\r\n        <Input type=\"text\" placeholder=\"State\" value={from.state} onChange={updateFrom('state')} />\r\n      </AddressContainer>\r\n      <AddressContainer>\r\n        <Label>To:</Label>\r\n        <Input type=\"text\" placeholder=\"Street Address\" value={to.address} onChange={updateTo('address')} />\r\n        <Input type=\"text\" placeholder=\"City\" value={to.city} onChange={updateTo('city')} />\r\n        <Input type=\"text\" placeholder=\"State\" value={to.state} onChange={updateTo('state')} />\r\n      </AddressContainer>\r\n      <Button onClick={handleClick}>Calculate CO<sub>2</sub></Button>\r\n      { loading && <StyledLoadingIndicator />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RouteInput;","import Login from './Login';\r\nimport Results from './Results';\r\nimport RouteInput from './RouteInput';\r\n\r\nexport default { Login, Results, RouteInput };","import React from 'react';\r\nimport { Provider as ReduxProvider } from 'react-redux';\r\nimport Global from './Global';\r\nimport { ThemeProvider } from 'emotion-theming';\r\n//import { Router } from 'react-router';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport { ConnectedRouter } from 'react-router-redux';\r\nimport styled from '@emotion/styled';\r\nimport history from './history';\r\nimport Pages from \"./pages\";\r\nimport logo from './logo.png';\r\n\r\n// THEME\r\nconst theme = {\r\n  colors: {\r\n    white: '#FFFFFF',\r\n    green: '#086F3C',\r\n    brown: '#C9B6A2',\r\n    lightBrown: '#EDE7E0',\r\n    darkBrown: '#6F3C08',\r\n    maroon: '#6F0808',\r\n  },\r\n}\r\n\r\nconst AppContainer = styled.div(({ theme: { colors } }) => ({\r\n  alignItems: 'center',\r\n  background: colors.lightBrown,\r\n  display: 'flex',\r\n  flexDirection: 'column',\r\n  margin: 'auto',\r\n  marginTop: 100,\r\n  padding: 32,\r\n  width: 400,\r\n}));\r\n\r\nconst Header = styled.h1(({ theme: { colors } }) => ({\r\n  color: colors.maroon,\r\n  fontFamily: 'sans-serif',\r\n  marginBottom: 32,\r\n}));\r\n\r\nconst Logo = styled.img({\r\n  width: 400,\r\n  marginTop: -32,\r\n  marginBottom: 32,\r\n})\r\n\r\nfunction App({ store }) {\r\n  return (\r\n    <ReduxProvider store={store}>\r\n      <ThemeProvider theme={theme}>\r\n        <Global />\r\n        <ConnectedRouter history={history}>\r\n          <AppContainer>\r\n            <Logo src={logo} alt=\"Logo\" width=\"400\" />\r\n            <Switch>\r\n              <Route exact path=\"/\" component={Pages.Login} />\r\n              <Route path=\"/start\" component={Pages.RouteInput} />\r\n              <Route path=\"/results\" component={Pages.Results} />\r\n              <Route component={() => (<div>404 Not Found</div>)} />\r\n            </Switch>\r\n          </AppContainer>\r\n        </ConnectedRouter>\r\n      </ThemeProvider>\r\n    </ReduxProvider>    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import reducer from './reducer';\r\nimport * as ActionTypes from './types';\r\nimport * as Actions from './actions';\r\nimport * as Selectors from './selectors';\r\n\r\nexport { Actions, ActionTypes, Selectors };\r\n\r\nexport default reducer;\r\n","// ROUTE OPTIONS\r\nexport const GET_ROUTE = 'GET_ROUTE';\r\nexport const GET_ROUTE_SUCCESS = 'GET_ROUTE_SUCCESS';\r\nexport const GET_ROUTE_ERROR = 'GET_ROUTE_ERROR';\r\n\r\n// export const LOGIN = 'LOGIN';\r\n// export const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\n// export const LOGIN_ERROR = 'LOGIN_ERROR';","// ROUTE OPTIONS\r\n\r\n// IMPORTS\r\nimport { handleActions } from 'redux-actions';\r\nimport * as Types from './types';\r\n\r\n// SETS DATA FOR INITIAL STATE\r\nconst initialState = {\r\n  data: null,\r\n  isLoading: false,\r\n};\r\n\r\n// HANDLES ACTION, STARTS LOADING\r\nconst getRouteReducer = state => ({\r\n  ...state,\r\n  isLoading: true,\r\n});\r\n\r\n// UPDATES STATE WITH PAYLOAD FROM ACTION, STOPS LOADING\r\nconst getRouteSuccessReducer = (state, action) => ({\r\n  data: action.payload,\r\n  isLoading: false,\r\n});\r\n\r\n// ...\r\nconst getRouteErrorReducer = (state, action) => ({\r\n});\r\n\r\nexport default handleActions({\r\n  [Types.GET_ROUTE]: getRouteReducer,\r\n  [Types.GET_ROUTE_SUCCESS]: getRouteSuccessReducer,\r\n  [Types.GET_ROUTE_ERROR]: getRouteErrorReducer,\r\n}, initialState);\r\n\r\n\r\n\r\n","// ROUTE OPTIONS\r\n\r\n// IMPORTS\r\nimport { createAction } from 'redux-actions';\r\nimport * as Types from './types';\r\n\r\n// EXPORT ROUTE ACTIONS\r\nexport const getRoute = createAction(Types.GET_ROUTE);\r\nexport const getRouteSuccess = createAction(Types.GET_ROUTE_SUCCESS);\r\nexport const getRouteError = createAction(Types.GET_ROUTE_ERROR);\r\n\r\n// // EXPORT LOGIN ACTIONS\r\n// export const login = createAction(Types.LOGIN);\r\n// export const loginSuccess = createAction(Types.LOGIN_SUCCESS);\r\n// export const loginError = createAction(Types.LOGIN_ERROR);","// ROUTE OPTIONS\r\nimport reducer from './reducer';\r\nimport * as ActionTypes from './types';\r\nimport * as Actions from './actions';\r\nimport * as Selectors from './selectors';\r\n\r\nexport { Actions, ActionTypes, Selectors };\r\n\r\nexport default reducer; // (convention)\r\n","import { combineReducers } from 'redux';\r\n\r\nimport currentTripReducer from './data/current-trip';\r\nimport currentUserIdReducer from './data/current-user-id';\r\nimport routeOptionsReducer from './data/route-options';\r\n\r\nexport default combineReducers({\r\n  currentTrip: currentTripReducer,\r\n  currentUserId: currentUserIdReducer,\r\n  routeOptions: routeOptionsReducer,\r\n});\r\n","/* eslint-disable global-require, import/no-extraneous-dependencies, import/newline-after-import */\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootReducer from './reducers';\r\n\r\n// Create the saga middleware\r\nexport const sagaMiddleware = createSagaMiddleware();\r\n\r\n// Action Sanitizer (to serialize error objects)\r\nconst actionSanitizer = action => {\r\n  if (action.error) {\r\n    const error = action.payload;\r\n\r\n    const serializedError = {\r\n      type: error.name,\r\n      message: error.message,\r\n      stack: error.stack,\r\n    };\r\n\r\n    return { ...action, payload: serializedError };\r\n  }\r\n\r\n  return action;\r\n};\r\n\r\nconst composeEnhancers = composeWithDevTools({ actionSanitizer, name: 'GreenFoot' });\r\n\r\nexport const configureStore = initialState =>\r\n  createStore(rootReducer, initialState, composeEnhancers(applyMiddleware(sagaMiddleware)));\r\n","export const API_URL = 'https://greenfoot-hackathon.herokuapp.com';","import { put, takeLatest, delay } from 'redux-saga/effects';\r\nimport * as Types from './types';\r\nimport * as Actions from './actions';\r\nimport history from '../../history';\r\nimport { API_URL } from '../../constants';\r\n\r\nfunction* login(action) {\r\n  // GRAB PAYLOAD FROM ACTION \r\n  const email = action.payload;\r\n\r\n  // TRY REQUEST \r\n  try {\r\n    // const response = yield fetch(`${API_URL}/login`, {\r\n    //   method: 'POST',\r\n    //   body: JSON.stringify({ email }),\r\n    // });\r\n\r\n    // console.log('response', response);\r\n\r\n    // if (!response.ok) {\r\n    //   throw new Error('Error');\r\n    // }\r\n\r\n    // const data = response.json();\r\n    yield delay(300);\r\n    yield put(Actions.loginSuccess(1));\r\n    history.push('/start');\r\n  } catch (error) {\r\n    yield put(Actions.loginError(error));\r\n  }\r\n};\r\n\r\nexport default function*() {\r\n  yield takeLatest(Types.LOGIN, login);\r\n}","// ROUTE OPTIONS\r\n\r\n// IMPORTS\r\nimport { put, select, takeLatest } from 'redux-saga/effects';\r\nimport * as Types from './types';\r\nimport * as Actions from './actions';\r\nimport { Selectors as CurrentUserSelectors } from '../current-user-id';\r\nimport { API_URL } from '../../constants';\r\n\r\nfunction* getRoute(action) {\r\n  // GRAB PAYLOAD FROM ACTION \r\n  const destination = action.payload;\r\n  const userId = 1;\r\n\r\n  // TRY REQUEST \r\n  try {\r\n    const userId = yield select(CurrentUserSelectors.getCurrentUserId);\r\n    // POST EMAIL REQUEST TO SERVER\r\n    const response = yield fetch(`${API_URL}/user/${userId}`, {\r\n      method: 'POST',\r\n      body: JSON.stringify({ destination }),\r\n    });\r\n\r\n    console.log('response', response);\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Error');\r\n    }\r\n\r\n    const data = response.json();\r\n\r\n    // PUSH THRU DATA IF SUCCESSFUL TO ROUTESUCESS\r\n    yield put(Actions.getRouteSuccess(data));\r\n  } \r\n  catch (error) {\r\n    console.log('error',error);\r\n\r\n    yield put(Actions.getRouteError(error));\r\n  }\r\n};\r\n\r\nexport default function*() {\r\n  yield takeLatest(Types.GET_ROUTE, getRoute);\r\n}","import { all, fork } from 'redux-saga/effects';\r\n\r\nimport currentUserIdSaga from './data/current-user-id/saga';\r\nimport routeOptionsSaga from './data/route-options/saga';\r\n\r\nexport default function* () {\r\n  yield all([\r\n    fork(currentUserIdSaga),\r\n    fork(routeOptionsSaga),\r\n  ]);\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { configureStore, sagaMiddleware } from './configureStore';\r\nimport sagas from './sagas';\r\n\r\nconst store = configureStore({});\r\n\r\nReactDOM.render(<App store={store}/>, document.getElementById('root'));\r\n\r\nsagaMiddleware.run(sagas);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}